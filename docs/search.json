[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Dani",
    "section": "",
    "text": "Hello, my name is Dani Servius, and I will be completing my Master’s Degree in Business Analytics."
  },
  {
    "objectID": "hello.html",
    "href": "hello.html",
    "title": "Hello, Quarto",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "hello.html#meet-quarto",
    "href": "hello.html#meet-quarto",
    "title": "Hello, Quarto",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "hello.html#meet-the-penguins",
    "href": "hello.html#meet-the-penguins",
    "title": "Hello, Quarto",
    "section": "Meet the penguins",
    "text": "Meet the penguins\n\nThe penguins data from the palmerpenguins package contains size measurements for 344 penguins from three species observed on three islands in the Palmer Archipelago, Antarctica.\nThe plot below shows the relationship between flipper and bill lengths of these penguins."
  },
  {
    "objectID": "Lab0Presentation.html#slide-1",
    "href": "Lab0Presentation.html#slide-1",
    "title": "Lab0 Presentation",
    "section": "slide 1",
    "text": "slide 1"
  },
  {
    "objectID": "Lab0Presentation.html#slide-2",
    "href": "Lab0Presentation.html#slide-2",
    "title": "Lab0 Presentation",
    "section": "slide 2",
    "text": "slide 2"
  },
  {
    "objectID": "Lab0Presentation.html#slide-3",
    "href": "Lab0Presentation.html#slide-3",
    "title": "Lab0 Presentation",
    "section": "slide 3",
    "text": "slide 3"
  },
  {
    "objectID": "BuildSite.html",
    "href": "BuildSite.html",
    "title": "Meet Dani",
    "section": "",
    "text": "Hello, my name is Dani Servius, and I will be completing my Master’s Degree in Business Analytics."
  },
  {
    "objectID": "Lab0 Presentation.html",
    "href": "Lab0 Presentation.html",
    "title": "Houston Housing Market",
    "section": "",
    "text": "if(!require(\"tidyverse\")) install.packages(\"tidyverse\")\n\nLoading required package: tidyverse\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(tidyverse)\ntxhousing |&gt; filter(city==\"Houston\") |&gt; \n             group_by(year) |&gt; \n             summarize(sales=sum(sales)) |&gt; \n             ggplot(aes(x=year, y=sales)) + \n                geom_line() + \n                ggtitle(\"Annual Houses Sold in Houston, TX\")"
  },
  {
    "objectID": "Lab0 Presentation.html#slide-1",
    "href": "Lab0 Presentation.html#slide-1",
    "title": "Houston Housing Market",
    "section": "",
    "text": "if(!require(\"tidyverse\")) install.packages(\"tidyverse\")\n\nLoading required package: tidyverse\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(tidyverse)\ntxhousing |&gt; filter(city==\"Houston\") |&gt; \n             group_by(year) |&gt; \n             summarize(sales=sum(sales)) |&gt; \n             ggplot(aes(x=year, y=sales)) + \n                geom_line() + \n                ggtitle(\"Annual Houses Sold in Houston, TX\")"
  },
  {
    "objectID": "Lab0 Presentation.html#slide-2",
    "href": "Lab0 Presentation.html#slide-2",
    "title": "Houston Housing Market",
    "section": "slide 2",
    "text": "slide 2\n\nif(!require(\"tidyverse\")) install.packages(\"tidyverse\")\nlibrary(tidyverse)\ntxhousing |&gt; filter(city==\"Houston\") |&gt; \n    group_by(month) |&gt; \n    summarize(avg_price=sum(volume) / sum(sales)) |&gt; \n    mutate(month=factor(month.abb[month], levels=month.abb, ordered=TRUE)) |&gt;\n    ggplot(aes(x=month, y=avg_price)) + \n    geom_bar(stat=\"identity\") + \n    ggtitle(\"Average Price of Houses Sold in Texas by Month\") + \n    xlab(\"Month\") + \n    ylab(\"Average Sale Price\") + \n    scale_y_continuous(labels = scales::dollar)"
  },
  {
    "objectID": "Lab0 Presentation.html#slide-3",
    "href": "Lab0 Presentation.html#slide-3",
    "title": "Houston Housing Market",
    "section": "slide 3",
    "text": "slide 3\n\nif(!require(\"tidyverse\")) install.packages(\"tidyverse\")\nlibrary(tidyverse)\ntxhousing |&gt; filter(year==2015) |&gt; \n    group_by(city) |&gt; \n    summarize(avg_price=sum(volume) / sum(sales),\n              num_sales=sum(sales)) |&gt; \n    slice_max(num_sales, n=10) |&gt;\n    ggplot(aes(x=city, y=avg_price)) + \n    geom_bar(stat=\"identity\") + \n    ggtitle(\"Average Price of Houses Sold in 2015 by City in Texas\") + \n    xlab(\"City\") + \n    ylab(\"Average Sale Price\") + \n    scale_y_continuous(labels = scales::dollar)"
  },
  {
    "objectID": "Lab0PDF.html",
    "href": "Lab0PDF.html",
    "title": "Lab 0",
    "section": "",
    "text": "```if(!require(\"tidyverse\")) install.packages(\"tidyverse\") library(tidyverse) txhousing |&gt; filter(city==\"Houston\") |&gt;               group_by(year) |&gt;               summarize(sales=sum(sales)) |&gt;               ggplot(aes(x=year, y=sales)) +                  geom_line() +                  ggtitle(\"Annual Houses Sold in Houston, TX\")```\n```if(!require(“tidyverse”)) install.packages(“tidyverse”) library(tidyverse) txhousing |&gt; filter(city==“Houston”) |&gt; group_by(month) |&gt; summarize(avg_price=sum(volume) / sum(sales)) |&gt; mutate(month=factor(month.abb[month], levels=month.abb, ordered=TRUE)) |&gt; ggplot(aes(x=month, y=avg_price)) + geom_bar(stat=“identity”) + ggtitle(“Average Price of Houses Sold in Texas by Month”) + xlab(“Month”) + ylab(“Average Sale Price”) + scale_y_continuous(labels = scales::dollar)```\n```if(!require(\"tidyverse\")) install.packages(\"tidyverse\")\nlibrary(tidyverse)\ntxhousing |&gt; filter(year==2015) |&gt; \n    group_by(city) |&gt; \n    summarize(avg_price=sum(volume) / sum(sales),\n              num_sales=sum(sales)) |&gt; \n    slice_max(num_sales, n=10) |&gt;\n    ggplot(aes(x=city, y=avg_price)) + \n    geom_bar(stat=\"identity\") + \n    ggtitle(\"Average Price of Houses Sold in 2015 by City in Texas\") + \n    xlab(\"City\") + \n    ylab(\"Average Sale Price\") + \n    scale_y_continuous(labels = scales::dollar)```"
  },
  {
    "objectID": "MP01.html",
    "href": "MP01.html",
    "title": "Fiscal Characteristics of Major US Public Transit Systems",
    "section": "",
    "text": "The purpose of this project was to analyze the farebox recovery ratio, which measures how much revenue a transit agency raises through fares relative to operating costs. A higher ratio means less reliance on other funding sources. We used data from three sources: the 2022 Fare Revenue table, the latest Monthly Ridership tables, and the 2022 Operating Expenses reports from the National Transit Database. The fare revenue reflects income from passenger fares, while monthly ridership covers number of people who use a public transportation system and operating expenses cover the costs of providing public transportation services.\n\n\nThe first step to was to download, clean, and join the Fare Revenue, Monthly Ridership and Operating Expenses tables:\n\nif(!require(\"tidyverse\")) install.packages(\"tidyverse\")\nlibrary(dplyr)\nlibrary(tidyverse)\ninstall.packages(\"dplyr\", repos = \"https://cran.rstudio.com/\")\n\n\nThe downloaded binary packages are in\n    /var/folders/dl/_pzx_mpd2mgc2my98swfbwfm0000gn/T//RtmpBK9fcs/downloaded_packages\n\n# Let's start with Fare Revenue\nlibrary(tidyverse)\nif(!file.exists(\"2022_fare_revenue.xlsx\")){\n  # This should work _in theory_ but in practice it's still a bit finicky\n  # If it doesn't work for you, download this file 'by hand' in your\n  # browser and save it as \"2022_fare_revenue.xlsx\" in your project\n  # directory.\n  download.file(\"http://www.transit.dot.gov/sites/fta.dot.gov/files/2024-04/2022%20Fare%20Revenue.xlsx\", \n                destfile=\"2022_fare_revenue.xlsx\", \n                quiet=FALSE, \n                method=\"wget\")\n}\nFARES &lt;- readxl::read_xlsx(\"2022_fare_revenue.xlsx\") |&gt;\n  select(-`State/Parent NTD ID`, \n         -`Reporter Type`,\n         -`Reporting Module`,\n         -`TOS`,\n         -`Passenger Paid Fares`,\n         -`Organization Paid Fares`) |&gt;\n  filter(`Expense Type` == \"Funds Earned During Period\") |&gt;\n  select(-`Expense Type`)\n\n# Next, expenses\nif(!file.exists(\"2022_expenses.csv\")){\n  # This should work _in theory_ but in practice it's still a bit finicky\n  # If it doesn't work for you, download this file 'by hand' in your\n  # browser and save it as \"2022_expenses.csv\" in your project\n  # directory.\n  download.file(\"https://data.transportation.gov/api/views/dkxx-zjd6/rows.csv?date=20231102&accessType=DOWNLOAD&bom=true&format=true\", \n                destfile=\"2022_expenses.csv\", \n                quiet=FALSE, \n                method=\"desktop\")\n}\nEXPENSES &lt;- readr::read_csv(\"2022_expenses.csv\") |&gt;\n  select(`NTD ID`, \n         `Agency`,\n         `Total`, \n         `Mode`) |&gt;\n  mutate(`NTD ID` = as.integer(`NTD ID`)) |&gt;\n  rename(Expenses = Total) |&gt;\n  group_by(`NTD ID`, `Mode`) |&gt;\n  summarize(Expenses = sum(Expenses)) |&gt;\n  ungroup()\n\nFINANCIALS &lt;- inner_join(FARES, EXPENSES, join_by(`NTD ID`, `Mode`))\n\n# Monthly Transit Numbers\nlibrary(tidyverse)\nif(!file.exists(\"ridership.xlsx\")){\n  # This should work _in theory_ but in practice it's still a bit finicky\n  # If it doesn't work for you, download this file 'by hand' in your\n  # browser and save it as \"ridership.xlsx\" in your project\n  # directory.\n  download.file(\"https://www.transit.dot.gov/sites/fta.dot.gov/files/2024-09/July%202024%20Complete%20Monthly%20Ridership%20%28with%20adjustments%20and%20estimates%29_240903.xlsx\", \n                destfile=\"ridership.xlsx\", \n                quiet=FALSE, \n                method=\"desktop\")\n}\nTRIPS &lt;- readxl::read_xlsx(\"ridership.xlsx\", sheet=\"UPT\") |&gt;\n  filter(`Mode/Type of Service Status` == \"Active\") |&gt;\n  select(-`Legacy NTD ID`, \n         -`Reporter Type`, \n         -`Mode/Type of Service Status`, \n         -`UACE CD`, \n         -`TOS`) |&gt;\n  pivot_longer(-c(`NTD ID`:`3 Mode`), \n               names_to=\"month\", \n               values_to=\"UPT\") |&gt;\n  drop_na() |&gt;\n  mutate(month=my(month)) # Parse _m_onth _y_ear date specs\nMILES &lt;- readxl::read_xlsx(\"ridership.xlsx\", sheet=\"VRM\") |&gt;\n  filter(`Mode/Type of Service Status` == \"Active\") |&gt;\n  select(-`Legacy NTD ID`, \n         -`Reporter Type`, \n         -`Mode/Type of Service Status`, \n         -`UACE CD`, \n         -`TOS`) |&gt;\n  pivot_longer(-c(`NTD ID`:`3 Mode`), \n               names_to=\"month\", \n               values_to=\"VRM\") |&gt;\n  drop_na() |&gt;\n  group_by(`NTD ID`, `Agency`, `UZA Name`, \n           `Mode`, `3 Mode`, month) |&gt;\n  summarize(VRM = sum(VRM)) |&gt;\n  ungroup() |&gt;\n  mutate(month=my(month)) # Parse _m_onth _y_ear date specs\n\nUSAGE &lt;- inner_join(TRIPS, MILES) |&gt;\n  mutate(`NTD ID` = as.integer(`NTD ID`))\n\nif(!require(\"DT\")) install.packages(\"DT\")\nlibrary(DT)\n\nsample_n(USAGE, 1000) |&gt; \n  mutate(month=as.character(month)) |&gt; \n  DT::datatable()\n\n\n\n\n\nCleaning data allows for us to better understand the variables we are using. In the code below I renamed the UZA Name columns to metro area , UPT to Unlinked Passenger Trips, VRM to Vehicle Revenue Miles and the mode acronyms were also replaced. Unlinked Passenger Trips is a measure of rides and Vehicle Revenue Miles refers to how far the transit provider traveled in total.\n\nTRIPS &lt;- TRIPS|&gt; rename(metro_area = `UZA Name`)\nMILES &lt;- MILES|&gt; rename(metro_area = `UZA Name`)\nUSAGE &lt;- USAGE|&gt; rename(metro_area = `UZA Name`)\nTRIPS &lt;- TRIPS|&gt; rename(Unlinked_Passenger_Trips = `UPT`)\nMILES &lt;- USAGE|&gt; rename(Unlinked_Passenger_Trips = `UPT`)\nUSAGE &lt;- USAGE|&gt; rename(Vehicle_Revenue_Miles = `VRM`)\nUSAGE &lt;- MILES|&gt; rename(Vehicle_Revenue_Miles = `VRM`)\n\n\nUSAGE &lt;- USAGE |&gt;\n  mutate(Mode=case_when(\n    Mode == \"HR\" ~ \"Heavy Rail\", \n    Mode == \"DR\"~\"Demand Response\",\n    Mode == \"FB\"~\"Ferryboat\",\n    Mode == \"MB\"~\"Bus\",\n    Mode == \"SR\"~\"Streetcar Rail\",\n    Mode == \"TB\"~\"Trolleybus\",\n    Mode == \"VP\"~\"Vanpool\",\n    Mode == \"CB\"~\"Commuter Bus\",\n    Mode == \"RB\"~\"Bus Rapid Transit\",\n    Mode == \"LR\"~\"Light Rail\",\n    Mode == \"YR\"~\"Hybrid Rail\",\n    Mode == \"MG\"~\"Monorail Automated Guideway\",\n    Mode == \"CR\"~\"Commuter Rail\",\n    Mode == \"AR\"~\"Alaska Railroad\",\n    Mode == \"TR\"~\"Aerial Tramway\",\n    Mode == \"IP\"~\"Inclined Plane\",\n    Mode == \"PB\"~\"Publico\",\n    Mode == \"CC\"~\"Cable Car\",\n    TRUE~\"Unknown\"))\n\nif(!require(\"DT\")) install.packages(\"DT\")\nlibrary(DT)\n\nsample_n(USAGE, 1000) |&gt; \n  mutate(month=as.character(month)) |&gt; \n  DT::datatable()\n\n\n\n\nUSAGE &lt;- USAGE |&gt; select(-`3 Mode`)\n\n\n\n\nDuring the analysis of the transit data I found the New York City Transit, has the highest vehicle revenue miles( VRM ). This means that of all the agencies the New York City Transit traveled the farthest in total. New York City Transit having the highest VRM maybe because its busier than most transit systems and has more station and more routes. Even though the New York City transit was the agency with the highest VRM, the highest mode from the data was the Bus (MB). The bus was the mode with the highest VRM because buses operate more frequently and operate on a fixed schedule. I was also able to filter by month, Unlinked Passenger Trips and New York City Transit to find the total number of trips taken in May 2024. I found the NYC Subway (Heavy Rail) had 180,458,819 trips in the month of May. If we take that number and divide it by 31 that’s about 5,821,252 trips that were taken daily. Between April 2019 and April 2020 ridership fell to 211,969,660. This can be attributed to the Covid-19 lock down that was announced in March 2020. The month with the highest VRM and UPT was in October 2019. The Top three agencies with the highest UPT is MTA New York City Transit, Chicago Transit Authority, and Los Angeles County Metropolitan Transportation Authority.\n\n# 1. What transit agency had the most total VRM in our dataset?\n\nagency_highest_VRM &lt;- USAGE |&gt; \n  drop_na()|&gt;\n  select(Agency, Vehicle_Revenue_Miles) |&gt;\n  group_by(Agency) |&gt;\n  summarize(total_Vehicle_Revenue_Miles = sum(Vehicle_Revenue_Miles)) |&gt;\n  arrange(desc(total_Vehicle_Revenue_Miles))\nprint(agency_highest_VRM)\n\n# A tibble: 677 × 2\n   Agency                                                 total_Vehicle_Revenu…¹\n   &lt;chr&gt;                                                                   &lt;dbl&gt;\n 1 MTA New York City Transit                                         10832855350\n 2 New Jersey Transit Corporation                                     5645525525\n 3 Los Angeles County Metropolitan Transportation Author…             4354016659\n 4 Washington Metropolitan Area Transit Authority                     2821950701\n 5 Chicago Transit Authority                                          2806202144\n 6 Southeastern Pennsylvania Transportation Authority                 2672630410\n 7 Massachusetts Bay Transportation Authority                         2383967378\n 8 Pace, the Suburban Bus Division of the Regional Trans…             2379409930\n 9 Metropolitan Transit Authority of Harris County, Texas             2272940948\n10 Denver Regional Transportation District                            1991411970\n# ℹ 667 more rows\n# ℹ abbreviated name: ¹​total_Vehicle_Revenue_Miles\n\n# 2. What transit mode had the most total VRM in our dataset?\n\nmode_highest_VRM &lt;- USAGE |&gt; \n  drop_na() |&gt;\n  select(Mode, Vehicle_Revenue_Miles) |&gt;\n  group_by(Mode) |&gt;\n  summarize(sum_Vehicle_Revenue_Miles_Mode = sum(Vehicle_Revenue_Miles)) |&gt;\n  arrange(desc(sum_Vehicle_Revenue_Miles_Mode))\nprint(mode_highest_VRM)\n\n# A tibble: 18 × 2\n   Mode                        sum_Vehicle_Revenue_Miles_Mode\n   &lt;chr&gt;                                                &lt;dbl&gt;\n 1 Bus                                            49444494088\n 2 Demand Response                                17955073508\n 3 Heavy Rail                                     14620362107\n 4 Commuter Rail                                   6970644241\n 5 Vanpool                                         3015783362\n 6 Light Rail                                      2090094714\n 7 Commuter Bus                                    1380948975\n 8 Publico                                         1021270808\n 9 Trolleybus                                       236840288\n10 Bus Rapid Transit                                118425283\n11 Ferryboat                                         65589783\n12 Streetcar Rail                                    63389725\n13 Monorail Automated Guideway                       37879729\n14 Hybrid Rail                                       37787608\n15 Alaska Railroad                                   13833261\n16 Cable Car                                          7386019\n17 Inclined Plane                                      705904\n18 Aerial Tramway                                      292860\n\n# 3. How many trips were taken on the NYC Subway (Heavy Rail) in May 2024?\n\nHeavy_Rail_TRIPS_May_2024 &lt;- USAGE |&gt; \n  drop_na() |&gt;\n  select(Mode, month, Agency, Unlinked_Passenger_Trips) |&gt;\n  filter(Agency == \"MTA New York City Transit\") |&gt; \n  filter(Mode == \"Heavy Rail\") |&gt; \n  filter(month == \"2024-05-01\")\nprint(Heavy_Rail_TRIPS_May_2024)\n\n# A tibble: 1 × 4\n  Mode       month      Agency                    Unlinked_Passenger_Trips\n  &lt;chr&gt;      &lt;date&gt;     &lt;chr&gt;                                        &lt;dbl&gt;\n1 Heavy Rail 2024-05-01 MTA New York City Transit                180458819\n\n# 4. How much did NYC subway ridership fall between April 2019 and April 2020?\n\n# Data for April 2019\nHeavy_Rail_TRIPS_Apr_2019 &lt;- USAGE |&gt; \n  drop_na() |&gt;\n  select(Mode, month, Agency, Unlinked_Passenger_Trips) |&gt;\n  filter(Agency == \"MTA New York City Transit\") |&gt; \n  filter(Mode == \"Heavy Rail\") |&gt; \n  filter(month == \"2019-04-01\")\n\n# Data for April 2020\nHeavy_Rail_TRIPS_Apr_2020 &lt;- USAGE |&gt; \n  drop_na() |&gt;\n  select(Mode, month, Agency, Unlinked_Passenger_Trips) |&gt;\n  filter(Agency == \"MTA New York City Transit\") |&gt; \n  filter(Mode == \"Heavy Rail\") |&gt; \n  filter(month == \"2020-04-01\")\n\n# Calculating the difference in trips between April 2019 and April 2020\nridership_fall &lt;- Heavy_Rail_TRIPS_Apr_2019$Unlinked_Passenger_Trips - Heavy_Rail_TRIPS_Apr_2020$Unlinked_Passenger_Trips\nprint(paste(\"Ridership fall: \", ridership_fall))\n\n[1] \"Ridership fall:  211969660\"\n\n# 5. What month had the highest VRM?\n\nMonth_Highest_VRM &lt;- USAGE |&gt; \n  drop_na() |&gt;\n  select(Mode, Vehicle_Revenue_Miles, month) |&gt;\n  group_by(month) |&gt;\n  summarize(sum_Vehicle_Revenue_Miles_Mode = sum(Vehicle_Revenue_Miles)) |&gt;\n  arrange(desc(sum_Vehicle_Revenue_Miles_Mode))\nprint(Month_Highest_VRM)\n\n# A tibble: 271 × 2\n   month      sum_Vehicle_Revenue_Miles_Mode\n   &lt;date&gt;                              &lt;dbl&gt;\n 1 2019-10-01                      449683378\n 2 2018-10-01                      440042183\n 3 2019-08-01                      436998884\n 4 2019-05-01                      436386121\n 5 2020-01-01                      435214109\n 6 2018-08-01                      434169214\n 7 2019-07-01                      431713807\n 8 2019-03-01                      430340218\n 9 2019-04-01                      429287578\n10 2024-05-01                      428751744\n# ℹ 261 more rows\n\n# 6. What are the top three agencies with the highest Unlinked Passenger Trips?\n\ntop_agencies_UPT &lt;- USAGE |&gt; \n  group_by(Agency) |&gt;\n  summarise(sum_UPT = sum(Unlinked_Passenger_Trips, na.rm = TRUE)) |&gt;\n  arrange(desc(sum_UPT)) \n\n# 7. What month had the highest Unlinked Passenger Trips?\n\nhighest_month_UPT &lt;- USAGE |&gt; \n  group_by(month) |&gt;\n  summarise(sum_UPT_by_month = sum(Unlinked_Passenger_Trips, na.rm = TRUE)) |&gt;\n  arrange(desc(sum_UPT_by_month))\nprint(highest_month_UPT)\n\n# A tibble: 271 × 2\n   month      sum_UPT_by_month\n   &lt;date&gt;                &lt;dbl&gt;\n 1 2014-10-01        952626585\n 2 2013-10-01        937588726\n 3 2015-10-01        922306748\n 4 2008-10-01        902261900\n 5 2018-10-01        899141878\n 6 2014-09-01        897870823\n 7 2019-10-01        894334312\n 8 2014-05-01        890616631\n 9 2014-04-01        887375763\n10 2012-10-01        886216797\n# ℹ 261 more rows\n\n\n\n\n\nThe final step of this project involved creating a new table from the Usage table that summed the annual Unlinked Passenger Trips (UPT) and Vehicle Revenue Miles (VRM) for 2022. UPT measures the number of rides taken, while VRM indicates the total distance traveled by the transit provider. I named this new table USAGE 2022 ANNUAL, which was then joined with the FINANCIALS table. Before joining the tables, I converted the modes in the FINANCIALS table to ensure they matched those in the USAGE 2022 ANNUAL table. Based on the analysis of the transit data for 2022, several key insights emerged regarding the performance and efficiency of various transit systems. The MTA New York City Transit, Heavy Rail, had the highest Unlinked Passenger Trips (UPT), totaling 1,793,073,801 rides, this may be driven by the city’s large population.\nIn contrast, the Transit Authority of Central Kentucky, Vanpool, demonstrated strong financial sustainability with the highest farebox recovery ratio. The Vanpool has a ratio of fare box recovery of 2.384745, suggesting less reliance on other funding sources. Meanwhile, the North Carolina State University, Vanpool, exhibited the lowest expenses per UPT, at 1.17912 suggesting it has better fare values for riders. Additionally, the Demand Response for Altoona Metro Transit had the highest total fares per UPT, totaling 656.0769 meaning more riders paying for transportation. While the New Mexico Department of Transportation Vanpool maintained the lowest expenses per Vehicle Revenue Mile (VRM) with a total of 0.3366857. Compared to the New Mexico Department of Transportation Vanpool, the Chicago Water Taxi (Wendella) – Ferryboat has the highest total fares per VRM with a total of New Mexico Department of Transportation Vanpool. In terms of financial efficiency, the Transit Authority of Central Kentucky, Vanpool, might be considered one of the most efficient. However, in this project operational costs and ridership were the priority, so North Carolina State University, Vanpool is a better choice in terms of farebox.\n\n# Prepare the annual data for 2022\nUSAGE_2022_ANNUAL &lt;- USAGE |&gt;\n  filter(year(month) == 2022) |&gt;\n  group_by(`NTD ID`, Agency, metro_area, Mode) |&gt;\n  summarize(\n    UPT = sum(Unlinked_Passenger_Trips, na.rm=TRUE),\n    VRM = sum(Vehicle_Revenue_Miles, na.rm=TRUE)\n  ) |&gt;\n  ungroup()\n\n# Standardize the mode names in the financials dataset\nFINANCIALS &lt;- FINANCIALS |&gt;\n  mutate(Mode = case_when(\n    Mode == \"HR\" ~ \"Heavy Rail\", \n    Mode == \"DR\" ~ \"Demand Response\",\n    Mode == \"FB\" ~ \"Ferryboat\",\n    Mode == \"MB\" ~ \"Bus\",\n    Mode == \"SR\" ~ \"Streetcar Rail\",\n    Mode == \"TB\" ~ \"Trolleybus\",\n    Mode == \"VP\" ~ \"Vanpool\",\n    Mode == \"CB\" ~ \"Commuter Bus\",\n    Mode == \"RB\" ~ \"Bus Rapid Transit\",\n    Mode == \"LR\" ~ \"Light Rail\",\n    Mode == \"YR\" ~ \"Hybrid Rail\",\n    Mode == \"MG\" ~ \"Monorail Automated Guideway\",\n    Mode == \"CR\" ~ \"Commuter Rail\",\n    Mode == \"AR\" ~ \"Alaska Railroad\",\n    Mode == \"TR\" ~ \"Aerial Tramway\",\n    Mode == \"IP\" ~ \"Inclined Plane\",\n    Mode == \"PB\" ~ \"Publico\",\n    Mode == \"CC\" ~ \"Cable Car\",\n    TRUE ~ \"Unknown\"\n  ))\n\n# Join USAGE and FINANCIALS data by NTD ID and Mode\nUSAGE_AND_FINANCIALS &lt;- left_join(USAGE_2022_ANNUAL, FINANCIALS, join_by(`NTD ID`, `Mode`)) |&gt;\n  drop_na()\n\n# 1. Which transit system (agency and mode) had the most UPT in 2022?\nmost_UPT &lt;- USAGE_AND_FINANCIALS |&gt;\n  filter(UPT == max(UPT, na.rm = TRUE)) |&gt;\n  select(Agency, Mode, UPT)\nprint(most_UPT)\n\n# A tibble: 1 × 3\n  Agency                    Mode              UPT\n  &lt;chr&gt;                     &lt;chr&gt;           &lt;dbl&gt;\n1 MTA New York City Transit Heavy Rail 1793073801\n\n# 2. Which transit system (agency and mode) had the highest farebox recovery (Total Fares / Expenses)?\nhighest_farebox_recovery &lt;- USAGE_AND_FINANCIALS |&gt;\n  mutate(farebox_recovery = `Total Fares` / Expenses) |&gt;\n  filter(farebox_recovery == max(farebox_recovery, na.rm = TRUE)) |&gt;\n  select(Agency, Mode, farebox_recovery)\nprint(highest_farebox_recovery)\n\n# A tibble: 1 × 3\n  Agency                                Mode    farebox_recovery\n  &lt;chr&gt;                                 &lt;chr&gt;              &lt;dbl&gt;\n1 Transit Authority of Central Kentucky Vanpool             2.38\n\n# 3. Which transit system (agency and mode) has the lowest expenses per UPT?\nlowest_expense_per_UPT &lt;- USAGE_AND_FINANCIALS |&gt;\n  mutate(expenses_per_UPT = Expenses / UPT) |&gt;\n  filter(expenses_per_UPT == min(expenses_per_UPT, na.rm = TRUE)) |&gt;\n  select(Agency, Mode, expenses_per_UPT)\nprint(lowest_expense_per_UPT)\n\n# A tibble: 1 × 3\n  Agency                          Mode  expenses_per_UPT\n  &lt;chr&gt;                           &lt;chr&gt;            &lt;dbl&gt;\n1 North Carolina State University Bus               1.18\n\n# 4. Which transit system (agency and mode) has the highest total fares per UPT?\nhighest_fares_per_UPT &lt;- USAGE_AND_FINANCIALS |&gt;\n  mutate(fares_per_UPT = `Total Fares` / UPT) |&gt;\n  filter(fares_per_UPT == max(fares_per_UPT, na.rm = TRUE)) |&gt;\n  select(Agency, Mode, fares_per_UPT)\nprint(highest_fares_per_UPT)\n\n# A tibble: 1 × 3\n  Agency                Mode            fares_per_UPT\n  &lt;chr&gt;                 &lt;chr&gt;                   &lt;dbl&gt;\n1 Altoona Metro Transit Demand Response          656.\n\n# 5. Which transit system (agency and mode) has the lowest expenses per VRM?\nlowest_expenses_per_VRM &lt;- USAGE_AND_FINANCIALS |&gt;\n  mutate(expenses_per_VRM = Expenses / VRM) |&gt;\n  filter(expenses_per_VRM == min(expenses_per_VRM, na.rm = TRUE)) |&gt;\n  select(Agency, Mode, expenses_per_VRM)\nprint(lowest_expenses_per_VRM)\n\n# A tibble: 1 × 3\n  Agency                                  Mode    expenses_per_VRM\n  &lt;chr&gt;                                   &lt;chr&gt;              &lt;dbl&gt;\n1 New Mexico Department of Transportation Vanpool            0.337\n\n# 6. Which transit system (agency and mode) has the highest total fares per VRM?\nhighest_fares_per_VRM &lt;- USAGE_AND_FINANCIALS |&gt;\n  mutate(fares_per_VRM = `Total Fares` / VRM) |&gt;\n  filter(fares_per_VRM == max(fares_per_VRM, na.rm = TRUE)) |&gt;\n  select(Agency, Mode, fares_per_VRM)\nprint(highest_fares_per_VRM)\n\n# A tibble: 1 × 3\n  Agency                        Mode      fares_per_VRM\n  &lt;chr&gt;                         &lt;chr&gt;             &lt;dbl&gt;\n1 Chicago Water Taxi (Wendella) Ferryboat          237."
  },
  {
    "objectID": "MP01.html#generating-tables",
    "href": "MP01.html#generating-tables",
    "title": "Fiscal Characteristics of Major US Public Transit Systems",
    "section": "",
    "text": "The first step to was to download, clean, and join the Fare Revenue, Monthly Ridership and Operating Expenses tables:\n\nif(!require(\"tidyverse\")) install.packages(\"tidyverse\")\nlibrary(dplyr)\nlibrary(tidyverse)\ninstall.packages(\"dplyr\", repos = \"https://cran.rstudio.com/\")\n\n\nThe downloaded binary packages are in\n    /var/folders/dl/_pzx_mpd2mgc2my98swfbwfm0000gn/T//RtmpBK9fcs/downloaded_packages\n\n# Let's start with Fare Revenue\nlibrary(tidyverse)\nif(!file.exists(\"2022_fare_revenue.xlsx\")){\n  # This should work _in theory_ but in practice it's still a bit finicky\n  # If it doesn't work for you, download this file 'by hand' in your\n  # browser and save it as \"2022_fare_revenue.xlsx\" in your project\n  # directory.\n  download.file(\"http://www.transit.dot.gov/sites/fta.dot.gov/files/2024-04/2022%20Fare%20Revenue.xlsx\", \n                destfile=\"2022_fare_revenue.xlsx\", \n                quiet=FALSE, \n                method=\"wget\")\n}\nFARES &lt;- readxl::read_xlsx(\"2022_fare_revenue.xlsx\") |&gt;\n  select(-`State/Parent NTD ID`, \n         -`Reporter Type`,\n         -`Reporting Module`,\n         -`TOS`,\n         -`Passenger Paid Fares`,\n         -`Organization Paid Fares`) |&gt;\n  filter(`Expense Type` == \"Funds Earned During Period\") |&gt;\n  select(-`Expense Type`)\n\n# Next, expenses\nif(!file.exists(\"2022_expenses.csv\")){\n  # This should work _in theory_ but in practice it's still a bit finicky\n  # If it doesn't work for you, download this file 'by hand' in your\n  # browser and save it as \"2022_expenses.csv\" in your project\n  # directory.\n  download.file(\"https://data.transportation.gov/api/views/dkxx-zjd6/rows.csv?date=20231102&accessType=DOWNLOAD&bom=true&format=true\", \n                destfile=\"2022_expenses.csv\", \n                quiet=FALSE, \n                method=\"desktop\")\n}\nEXPENSES &lt;- readr::read_csv(\"2022_expenses.csv\") |&gt;\n  select(`NTD ID`, \n         `Agency`,\n         `Total`, \n         `Mode`) |&gt;\n  mutate(`NTD ID` = as.integer(`NTD ID`)) |&gt;\n  rename(Expenses = Total) |&gt;\n  group_by(`NTD ID`, `Mode`) |&gt;\n  summarize(Expenses = sum(Expenses)) |&gt;\n  ungroup()\n\nFINANCIALS &lt;- inner_join(FARES, EXPENSES, join_by(`NTD ID`, `Mode`))\n\n# Monthly Transit Numbers\nlibrary(tidyverse)\nif(!file.exists(\"ridership.xlsx\")){\n  # This should work _in theory_ but in practice it's still a bit finicky\n  # If it doesn't work for you, download this file 'by hand' in your\n  # browser and save it as \"ridership.xlsx\" in your project\n  # directory.\n  download.file(\"https://www.transit.dot.gov/sites/fta.dot.gov/files/2024-09/July%202024%20Complete%20Monthly%20Ridership%20%28with%20adjustments%20and%20estimates%29_240903.xlsx\", \n                destfile=\"ridership.xlsx\", \n                quiet=FALSE, \n                method=\"desktop\")\n}\nTRIPS &lt;- readxl::read_xlsx(\"ridership.xlsx\", sheet=\"UPT\") |&gt;\n  filter(`Mode/Type of Service Status` == \"Active\") |&gt;\n  select(-`Legacy NTD ID`, \n         -`Reporter Type`, \n         -`Mode/Type of Service Status`, \n         -`UACE CD`, \n         -`TOS`) |&gt;\n  pivot_longer(-c(`NTD ID`:`3 Mode`), \n               names_to=\"month\", \n               values_to=\"UPT\") |&gt;\n  drop_na() |&gt;\n  mutate(month=my(month)) # Parse _m_onth _y_ear date specs\nMILES &lt;- readxl::read_xlsx(\"ridership.xlsx\", sheet=\"VRM\") |&gt;\n  filter(`Mode/Type of Service Status` == \"Active\") |&gt;\n  select(-`Legacy NTD ID`, \n         -`Reporter Type`, \n         -`Mode/Type of Service Status`, \n         -`UACE CD`, \n         -`TOS`) |&gt;\n  pivot_longer(-c(`NTD ID`:`3 Mode`), \n               names_to=\"month\", \n               values_to=\"VRM\") |&gt;\n  drop_na() |&gt;\n  group_by(`NTD ID`, `Agency`, `UZA Name`, \n           `Mode`, `3 Mode`, month) |&gt;\n  summarize(VRM = sum(VRM)) |&gt;\n  ungroup() |&gt;\n  mutate(month=my(month)) # Parse _m_onth _y_ear date specs\n\nUSAGE &lt;- inner_join(TRIPS, MILES) |&gt;\n  mutate(`NTD ID` = as.integer(`NTD ID`))\n\nif(!require(\"DT\")) install.packages(\"DT\")\nlibrary(DT)\n\nsample_n(USAGE, 1000) |&gt; \n  mutate(month=as.character(month)) |&gt; \n  DT::datatable()\n\n\n\n\n\nCleaning data allows for us to better understand the variables we are using. In the code below I renamed the UZA Name columns to metro area , UPT to Unlinked Passenger Trips, VRM to Vehicle Revenue Miles and the mode acronyms were also replaced. Unlinked Passenger Trips is a measure of rides and Vehicle Revenue Miles refers to how far the transit provider traveled in total.\n\nTRIPS &lt;- TRIPS|&gt; rename(metro_area = `UZA Name`)\nMILES &lt;- MILES|&gt; rename(metro_area = `UZA Name`)\nUSAGE &lt;- USAGE|&gt; rename(metro_area = `UZA Name`)\nTRIPS &lt;- TRIPS|&gt; rename(Unlinked_Passenger_Trips = `UPT`)\nMILES &lt;- USAGE|&gt; rename(Unlinked_Passenger_Trips = `UPT`)\nUSAGE &lt;- USAGE|&gt; rename(Vehicle_Revenue_Miles = `VRM`)\nUSAGE &lt;- MILES|&gt; rename(Vehicle_Revenue_Miles = `VRM`)\n\n\nUSAGE &lt;- USAGE |&gt;\n  mutate(Mode=case_when(\n    Mode == \"HR\" ~ \"Heavy Rail\", \n    Mode == \"DR\"~\"Demand Response\",\n    Mode == \"FB\"~\"Ferryboat\",\n    Mode == \"MB\"~\"Bus\",\n    Mode == \"SR\"~\"Streetcar Rail\",\n    Mode == \"TB\"~\"Trolleybus\",\n    Mode == \"VP\"~\"Vanpool\",\n    Mode == \"CB\"~\"Commuter Bus\",\n    Mode == \"RB\"~\"Bus Rapid Transit\",\n    Mode == \"LR\"~\"Light Rail\",\n    Mode == \"YR\"~\"Hybrid Rail\",\n    Mode == \"MG\"~\"Monorail Automated Guideway\",\n    Mode == \"CR\"~\"Commuter Rail\",\n    Mode == \"AR\"~\"Alaska Railroad\",\n    Mode == \"TR\"~\"Aerial Tramway\",\n    Mode == \"IP\"~\"Inclined Plane\",\n    Mode == \"PB\"~\"Publico\",\n    Mode == \"CC\"~\"Cable Car\",\n    TRUE~\"Unknown\"))\n\nif(!require(\"DT\")) install.packages(\"DT\")\nlibrary(DT)\n\nsample_n(USAGE, 1000) |&gt; \n  mutate(month=as.character(month)) |&gt; \n  DT::datatable()\n\n\n\n\nUSAGE &lt;- USAGE |&gt; select(-`3 Mode`)"
  },
  {
    "objectID": "MP01.html#analysis",
    "href": "MP01.html#analysis",
    "title": "Fiscal Characteristics of Major US Public Transit Systems",
    "section": "",
    "text": "During the analysis of the transit data I found the New York City Transit, has the highest vehicle revenue miles( VRM ). This means that of all the agencies the New York City Transit traveled the farthest in total. New York City Transit having the highest VRM maybe because its busier than most transit systems and has more station and more routes. Even though the New York City transit was the agency with the highest VRM, the highest mode from the data was the Bus (MB). The bus was the mode with the highest VRM because buses operate more frequently and operate on a fixed schedule. I was also able to filter by month, Unlinked Passenger Trips and New York City Transit to find the total number of trips taken in May 2024. I found the NYC Subway (Heavy Rail) had 180,458,819 trips in the month of May. If we take that number and divide it by 31 that’s about 5,821,252 trips that were taken daily. Between April 2019 and April 2020 ridership fell to 211,969,660. This can be attributed to the Covid-19 lock down that was announced in March 2020. The month with the highest VRM and UPT was in October 2019. The Top three agencies with the highest UPT is MTA New York City Transit, Chicago Transit Authority, and Los Angeles County Metropolitan Transportation Authority.\n\n# 1. What transit agency had the most total VRM in our dataset?\n\nagency_highest_VRM &lt;- USAGE |&gt; \n  drop_na()|&gt;\n  select(Agency, Vehicle_Revenue_Miles) |&gt;\n  group_by(Agency) |&gt;\n  summarize(total_Vehicle_Revenue_Miles = sum(Vehicle_Revenue_Miles)) |&gt;\n  arrange(desc(total_Vehicle_Revenue_Miles))\nprint(agency_highest_VRM)\n\n# A tibble: 677 × 2\n   Agency                                                 total_Vehicle_Revenu…¹\n   &lt;chr&gt;                                                                   &lt;dbl&gt;\n 1 MTA New York City Transit                                         10832855350\n 2 New Jersey Transit Corporation                                     5645525525\n 3 Los Angeles County Metropolitan Transportation Author…             4354016659\n 4 Washington Metropolitan Area Transit Authority                     2821950701\n 5 Chicago Transit Authority                                          2806202144\n 6 Southeastern Pennsylvania Transportation Authority                 2672630410\n 7 Massachusetts Bay Transportation Authority                         2383967378\n 8 Pace, the Suburban Bus Division of the Regional Trans…             2379409930\n 9 Metropolitan Transit Authority of Harris County, Texas             2272940948\n10 Denver Regional Transportation District                            1991411970\n# ℹ 667 more rows\n# ℹ abbreviated name: ¹​total_Vehicle_Revenue_Miles\n\n# 2. What transit mode had the most total VRM in our dataset?\n\nmode_highest_VRM &lt;- USAGE |&gt; \n  drop_na() |&gt;\n  select(Mode, Vehicle_Revenue_Miles) |&gt;\n  group_by(Mode) |&gt;\n  summarize(sum_Vehicle_Revenue_Miles_Mode = sum(Vehicle_Revenue_Miles)) |&gt;\n  arrange(desc(sum_Vehicle_Revenue_Miles_Mode))\nprint(mode_highest_VRM)\n\n# A tibble: 18 × 2\n   Mode                        sum_Vehicle_Revenue_Miles_Mode\n   &lt;chr&gt;                                                &lt;dbl&gt;\n 1 Bus                                            49444494088\n 2 Demand Response                                17955073508\n 3 Heavy Rail                                     14620362107\n 4 Commuter Rail                                   6970644241\n 5 Vanpool                                         3015783362\n 6 Light Rail                                      2090094714\n 7 Commuter Bus                                    1380948975\n 8 Publico                                         1021270808\n 9 Trolleybus                                       236840288\n10 Bus Rapid Transit                                118425283\n11 Ferryboat                                         65589783\n12 Streetcar Rail                                    63389725\n13 Monorail Automated Guideway                       37879729\n14 Hybrid Rail                                       37787608\n15 Alaska Railroad                                   13833261\n16 Cable Car                                          7386019\n17 Inclined Plane                                      705904\n18 Aerial Tramway                                      292860\n\n# 3. How many trips were taken on the NYC Subway (Heavy Rail) in May 2024?\n\nHeavy_Rail_TRIPS_May_2024 &lt;- USAGE |&gt; \n  drop_na() |&gt;\n  select(Mode, month, Agency, Unlinked_Passenger_Trips) |&gt;\n  filter(Agency == \"MTA New York City Transit\") |&gt; \n  filter(Mode == \"Heavy Rail\") |&gt; \n  filter(month == \"2024-05-01\")\nprint(Heavy_Rail_TRIPS_May_2024)\n\n# A tibble: 1 × 4\n  Mode       month      Agency                    Unlinked_Passenger_Trips\n  &lt;chr&gt;      &lt;date&gt;     &lt;chr&gt;                                        &lt;dbl&gt;\n1 Heavy Rail 2024-05-01 MTA New York City Transit                180458819\n\n# 4. How much did NYC subway ridership fall between April 2019 and April 2020?\n\n# Data for April 2019\nHeavy_Rail_TRIPS_Apr_2019 &lt;- USAGE |&gt; \n  drop_na() |&gt;\n  select(Mode, month, Agency, Unlinked_Passenger_Trips) |&gt;\n  filter(Agency == \"MTA New York City Transit\") |&gt; \n  filter(Mode == \"Heavy Rail\") |&gt; \n  filter(month == \"2019-04-01\")\n\n# Data for April 2020\nHeavy_Rail_TRIPS_Apr_2020 &lt;- USAGE |&gt; \n  drop_na() |&gt;\n  select(Mode, month, Agency, Unlinked_Passenger_Trips) |&gt;\n  filter(Agency == \"MTA New York City Transit\") |&gt; \n  filter(Mode == \"Heavy Rail\") |&gt; \n  filter(month == \"2020-04-01\")\n\n# Calculating the difference in trips between April 2019 and April 2020\nridership_fall &lt;- Heavy_Rail_TRIPS_Apr_2019$Unlinked_Passenger_Trips - Heavy_Rail_TRIPS_Apr_2020$Unlinked_Passenger_Trips\nprint(paste(\"Ridership fall: \", ridership_fall))\n\n[1] \"Ridership fall:  211969660\"\n\n# 5. What month had the highest VRM?\n\nMonth_Highest_VRM &lt;- USAGE |&gt; \n  drop_na() |&gt;\n  select(Mode, Vehicle_Revenue_Miles, month) |&gt;\n  group_by(month) |&gt;\n  summarize(sum_Vehicle_Revenue_Miles_Mode = sum(Vehicle_Revenue_Miles)) |&gt;\n  arrange(desc(sum_Vehicle_Revenue_Miles_Mode))\nprint(Month_Highest_VRM)\n\n# A tibble: 271 × 2\n   month      sum_Vehicle_Revenue_Miles_Mode\n   &lt;date&gt;                              &lt;dbl&gt;\n 1 2019-10-01                      449683378\n 2 2018-10-01                      440042183\n 3 2019-08-01                      436998884\n 4 2019-05-01                      436386121\n 5 2020-01-01                      435214109\n 6 2018-08-01                      434169214\n 7 2019-07-01                      431713807\n 8 2019-03-01                      430340218\n 9 2019-04-01                      429287578\n10 2024-05-01                      428751744\n# ℹ 261 more rows\n\n# 6. What are the top three agencies with the highest Unlinked Passenger Trips?\n\ntop_agencies_UPT &lt;- USAGE |&gt; \n  group_by(Agency) |&gt;\n  summarise(sum_UPT = sum(Unlinked_Passenger_Trips, na.rm = TRUE)) |&gt;\n  arrange(desc(sum_UPT)) \n\n# 7. What month had the highest Unlinked Passenger Trips?\n\nhighest_month_UPT &lt;- USAGE |&gt; \n  group_by(month) |&gt;\n  summarise(sum_UPT_by_month = sum(Unlinked_Passenger_Trips, na.rm = TRUE)) |&gt;\n  arrange(desc(sum_UPT_by_month))\nprint(highest_month_UPT)\n\n# A tibble: 271 × 2\n   month      sum_UPT_by_month\n   &lt;date&gt;                &lt;dbl&gt;\n 1 2014-10-01        952626585\n 2 2013-10-01        937588726\n 3 2015-10-01        922306748\n 4 2008-10-01        902261900\n 5 2018-10-01        899141878\n 6 2014-09-01        897870823\n 7 2019-10-01        894334312\n 8 2014-05-01        890616631\n 9 2014-04-01        887375763\n10 2012-10-01        886216797\n# ℹ 261 more rows"
  },
  {
    "objectID": "MP01.html#table-summarization",
    "href": "MP01.html#table-summarization",
    "title": "Fiscal Characteristics of Major US Public Transit Systems",
    "section": "",
    "text": "The final step of this project involved creating a new table from the Usage table that summed the annual Unlinked Passenger Trips (UPT) and Vehicle Revenue Miles (VRM) for 2022. UPT measures the number of rides taken, while VRM indicates the total distance traveled by the transit provider. I named this new table USAGE 2022 ANNUAL, which was then joined with the FINANCIALS table. Before joining the tables, I converted the modes in the FINANCIALS table to ensure they matched those in the USAGE 2022 ANNUAL table. Based on the analysis of the transit data for 2022, several key insights emerged regarding the performance and efficiency of various transit systems. The MTA New York City Transit, Heavy Rail, had the highest Unlinked Passenger Trips (UPT), totaling 1,793,073,801 rides, this may be driven by the city’s large population.\nIn contrast, the Transit Authority of Central Kentucky, Vanpool, demonstrated strong financial sustainability with the highest farebox recovery ratio. The Vanpool has a ratio of fare box recovery of 2.384745, suggesting less reliance on other funding sources. Meanwhile, the North Carolina State University, Vanpool, exhibited the lowest expenses per UPT, at 1.17912 suggesting it has better fare values for riders. Additionally, the Demand Response for Altoona Metro Transit had the highest total fares per UPT, totaling 656.0769 meaning more riders paying for transportation. While the New Mexico Department of Transportation Vanpool maintained the lowest expenses per Vehicle Revenue Mile (VRM) with a total of 0.3366857. Compared to the New Mexico Department of Transportation Vanpool, the Chicago Water Taxi (Wendella) – Ferryboat has the highest total fares per VRM with a total of New Mexico Department of Transportation Vanpool. In terms of financial efficiency, the Transit Authority of Central Kentucky, Vanpool, might be considered one of the most efficient. However, in this project operational costs and ridership were the priority, so North Carolina State University, Vanpool is a better choice in terms of farebox.\n\n# Prepare the annual data for 2022\nUSAGE_2022_ANNUAL &lt;- USAGE |&gt;\n  filter(year(month) == 2022) |&gt;\n  group_by(`NTD ID`, Agency, metro_area, Mode) |&gt;\n  summarize(\n    UPT = sum(Unlinked_Passenger_Trips, na.rm=TRUE),\n    VRM = sum(Vehicle_Revenue_Miles, na.rm=TRUE)\n  ) |&gt;\n  ungroup()\n\n# Standardize the mode names in the financials dataset\nFINANCIALS &lt;- FINANCIALS |&gt;\n  mutate(Mode = case_when(\n    Mode == \"HR\" ~ \"Heavy Rail\", \n    Mode == \"DR\" ~ \"Demand Response\",\n    Mode == \"FB\" ~ \"Ferryboat\",\n    Mode == \"MB\" ~ \"Bus\",\n    Mode == \"SR\" ~ \"Streetcar Rail\",\n    Mode == \"TB\" ~ \"Trolleybus\",\n    Mode == \"VP\" ~ \"Vanpool\",\n    Mode == \"CB\" ~ \"Commuter Bus\",\n    Mode == \"RB\" ~ \"Bus Rapid Transit\",\n    Mode == \"LR\" ~ \"Light Rail\",\n    Mode == \"YR\" ~ \"Hybrid Rail\",\n    Mode == \"MG\" ~ \"Monorail Automated Guideway\",\n    Mode == \"CR\" ~ \"Commuter Rail\",\n    Mode == \"AR\" ~ \"Alaska Railroad\",\n    Mode == \"TR\" ~ \"Aerial Tramway\",\n    Mode == \"IP\" ~ \"Inclined Plane\",\n    Mode == \"PB\" ~ \"Publico\",\n    Mode == \"CC\" ~ \"Cable Car\",\n    TRUE ~ \"Unknown\"\n  ))\n\n# Join USAGE and FINANCIALS data by NTD ID and Mode\nUSAGE_AND_FINANCIALS &lt;- left_join(USAGE_2022_ANNUAL, FINANCIALS, join_by(`NTD ID`, `Mode`)) |&gt;\n  drop_na()\n\n# 1. Which transit system (agency and mode) had the most UPT in 2022?\nmost_UPT &lt;- USAGE_AND_FINANCIALS |&gt;\n  filter(UPT == max(UPT, na.rm = TRUE)) |&gt;\n  select(Agency, Mode, UPT)\nprint(most_UPT)\n\n# A tibble: 1 × 3\n  Agency                    Mode              UPT\n  &lt;chr&gt;                     &lt;chr&gt;           &lt;dbl&gt;\n1 MTA New York City Transit Heavy Rail 1793073801\n\n# 2. Which transit system (agency and mode) had the highest farebox recovery (Total Fares / Expenses)?\nhighest_farebox_recovery &lt;- USAGE_AND_FINANCIALS |&gt;\n  mutate(farebox_recovery = `Total Fares` / Expenses) |&gt;\n  filter(farebox_recovery == max(farebox_recovery, na.rm = TRUE)) |&gt;\n  select(Agency, Mode, farebox_recovery)\nprint(highest_farebox_recovery)\n\n# A tibble: 1 × 3\n  Agency                                Mode    farebox_recovery\n  &lt;chr&gt;                                 &lt;chr&gt;              &lt;dbl&gt;\n1 Transit Authority of Central Kentucky Vanpool             2.38\n\n# 3. Which transit system (agency and mode) has the lowest expenses per UPT?\nlowest_expense_per_UPT &lt;- USAGE_AND_FINANCIALS |&gt;\n  mutate(expenses_per_UPT = Expenses / UPT) |&gt;\n  filter(expenses_per_UPT == min(expenses_per_UPT, na.rm = TRUE)) |&gt;\n  select(Agency, Mode, expenses_per_UPT)\nprint(lowest_expense_per_UPT)\n\n# A tibble: 1 × 3\n  Agency                          Mode  expenses_per_UPT\n  &lt;chr&gt;                           &lt;chr&gt;            &lt;dbl&gt;\n1 North Carolina State University Bus               1.18\n\n# 4. Which transit system (agency and mode) has the highest total fares per UPT?\nhighest_fares_per_UPT &lt;- USAGE_AND_FINANCIALS |&gt;\n  mutate(fares_per_UPT = `Total Fares` / UPT) |&gt;\n  filter(fares_per_UPT == max(fares_per_UPT, na.rm = TRUE)) |&gt;\n  select(Agency, Mode, fares_per_UPT)\nprint(highest_fares_per_UPT)\n\n# A tibble: 1 × 3\n  Agency                Mode            fares_per_UPT\n  &lt;chr&gt;                 &lt;chr&gt;                   &lt;dbl&gt;\n1 Altoona Metro Transit Demand Response          656.\n\n# 5. Which transit system (agency and mode) has the lowest expenses per VRM?\nlowest_expenses_per_VRM &lt;- USAGE_AND_FINANCIALS |&gt;\n  mutate(expenses_per_VRM = Expenses / VRM) |&gt;\n  filter(expenses_per_VRM == min(expenses_per_VRM, na.rm = TRUE)) |&gt;\n  select(Agency, Mode, expenses_per_VRM)\nprint(lowest_expenses_per_VRM)\n\n# A tibble: 1 × 3\n  Agency                                  Mode    expenses_per_VRM\n  &lt;chr&gt;                                   &lt;chr&gt;              &lt;dbl&gt;\n1 New Mexico Department of Transportation Vanpool            0.337\n\n# 6. Which transit system (agency and mode) has the highest total fares per VRM?\nhighest_fares_per_VRM &lt;- USAGE_AND_FINANCIALS |&gt;\n  mutate(fares_per_VRM = `Total Fares` / VRM) |&gt;\n  filter(fares_per_VRM == max(fares_per_VRM, na.rm = TRUE)) |&gt;\n  select(Agency, Mode, fares_per_VRM)\nprint(highest_fares_per_VRM)\n\n# A tibble: 1 × 3\n  Agency                        Mode      fares_per_VRM\n  &lt;chr&gt;                         &lt;chr&gt;             &lt;dbl&gt;\n1 Chicago Water Taxi (Wendella) Ferryboat          237."
  },
  {
    "objectID": "mp02.html",
    "href": "mp02.html",
    "title": "mp02",
    "section": "",
    "text": "echo = FALSE\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ readr     2.1.5\n✔ ggplot2   3.5.1     ✔ stringr   1.5.1\n✔ lubridate 1.9.3     ✔ tibble    3.2.1\n✔ purrr     1.0.2     ✔ tidyr     1.3.1\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\necho = FALSE\nget_imdb_file &lt;- function(fname){\n    BASE_URL &lt;- \"https://datasets.imdbws.com/\"\n    fname_ext &lt;- paste0(fname, \".tsv.gz\")\n    if(!file.exists(fname_ext)){\n        FILE_URL &lt;- paste0(BASE_URL, fname_ext)\n        download.file(FILE_URL, \n                      destfile = fname_ext)\n    }\n    as.data.frame(readr::read_tsv(fname_ext, lazy=FALSE))\n}\n\nNAME_BASICS      &lt;- get_imdb_file(\"name.basics\")\n\nRows: 13843806 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (6): nconst, primaryName, birthYear, deathYear, primaryProfession, known...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\necho = FALSE\nTITLE_BASICS     &lt;- get_imdb_file(\"title.basics\")\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\n\nRows: 11121787 Columns: 9\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (8): tconst, titleType, primaryTitle, originalTitle, startYear, endYear,...\ndbl (1): isAdult\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\necho = FALSE\nTITLE_EPISODES   &lt;- get_imdb_file(\"title.episode\")\n\nRows: 8535123 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (4): tconst, parentTconst, seasonNumber, episodeNumber\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\necho = FALSE\nTITLE_RATINGS    &lt;- get_imdb_file(\"title.ratings\")\n\nRows: 1482087 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (1): tconst\ndbl (2): averageRating, numVotes\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\necho = FALSE\nTITLE_CREW       &lt;- get_imdb_file(\"title.crew\")\n\nRows: 10461794 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (3): tconst, directors, writers\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\necho = FALSE\nTITLE_PRINCIPALS &lt;- get_imdb_file(\"title.principals\")\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\n\nRows: 86256014 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (5): tconst, nconst, category, job, characters\ndbl (1): ordering\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "mp02.html#data-sub-sampling",
    "href": "mp02.html#data-sub-sampling",
    "title": "mp02",
    "section": "Data Sub-Sampling",
    "text": "Data Sub-Sampling\n\necho = FALSE\nNAME_BASICS &lt;- NAME_BASICS |&gt; \n    filter(str_count(knownForTitles, \",\") &gt; 1)\n\n\necho = FALSE\nTITLE_RATINGS |&gt;\n    ggplot(aes(x=numVotes)) + \n    geom_histogram(bins=30) +\n    xlab(\"Number of IMDB Ratings\") + \n    ylab(\"Number of Titles\") + \n    ggtitle(\"Majority of IMDB Titles Have Less than 100 Ratings\") + \n    theme_bw() + \n    scale_x_log10(label=scales::comma) + \n    scale_y_continuous(label = scales::comma)\n\n\n\n\n\n\n\n\n\necho = FALSE\nTITLE_RATINGS |&gt;\n    pull(numVotes) |&gt;\n    quantile()\n\n     0%     25%     50%     75%    100% \n      5      11      26     101 2946100 \n\n\n\necho = FALSE\nTITLE_RATINGS &lt;- TITLE_RATINGS |&gt;\n    filter(numVotes &gt;= 100)\n\n\necho = FALSE\nTITLE_BASICS &lt;- TITLE_BASICS |&gt;\n    semi_join(TITLE_RATINGS, \n              join_by(tconst == tconst))\n\nTITLE_CREW &lt;- TITLE_CREW |&gt;\n    semi_join(TITLE_RATINGS, \n              join_by(tconst == tconst))\n\nTITLE_EPISODES_1 &lt;- TITLE_EPISODES |&gt;\n    semi_join(TITLE_RATINGS, \n              join_by(tconst == tconst))\nTITLE_EPISODES_2 &lt;- TITLE_EPISODES |&gt;\n    semi_join(TITLE_RATINGS, \n              join_by(parentTconst == tconst))\n\nTITLE_EPISODES &lt;- bind_rows(TITLE_EPISODES_1,\n                            TITLE_EPISODES_2) |&gt;\n    distinct()\n\nTITLE_PRINCIPALS &lt;- TITLE_PRINCIPALS |&gt;\n    semi_join(TITLE_RATINGS, join_by(tconst == tconst))\n\n\nrm(TITLE_EPISODES_1)\nrm(TITLE_EPISODES_2)\n\n\necho = FALSE\nNAME_BASICS &lt;- NAME_BASICS |&gt;\n    mutate(birthYear = as.numeric(birthYear),\n           deathYear = as.numeric(deathYear))\n\nWarning: There were 2 warnings in `mutate()`.\nThe first warning was:\nℹ In argument: `birthYear = as.numeric(birthYear)`.\nCaused by warning:\n! NAs introduced by coercion\nℹ Run `dplyr::last_dplyr_warnings()` to see the 1 remaining warning.\n\n\n\necho = FALSE\nglimpse(NAME_BASICS)\n\nRows: 3,181,465\nColumns: 6\n$ nconst            &lt;chr&gt; \"nm0000001\", \"nm0000002\", \"nm0000003\", \"nm0000004\", …\n$ primaryName       &lt;chr&gt; \"Fred Astaire\", \"Lauren Bacall\", \"Brigitte Bardot\", …\n$ birthYear         &lt;dbl&gt; 1899, 1924, 1934, 1949, 1918, 1915, 1899, 1924, 1925…\n$ deathYear         &lt;dbl&gt; 1987, 2014, NA, 1982, 2007, 1982, 1957, 2004, 1984, …\n$ primaryProfession &lt;chr&gt; \"actor,miscellaneous,producer\", \"actress,soundtrack,…\n$ knownForTitles    &lt;chr&gt; \"tt0072308,tt0050419,tt0053137,tt0027125\", \"tt003738…\n\n\nTask 2: Instructor-Provided Questions\nHow many movies are in our data set?\nTo find the number of movies in our dataset, I used the Title_Basics table and filtered the data to only include entries where the titleType is “movie.” After filtering, I summarized the data to calculate the total number of movies.\n\necho = FALSE\nTITLE_BASICS |&gt;\n  filter(titleType == \"movie\") |&gt;\n  summarise(total = n())\n\n   total\n1 131890\n\n\nHow many TV series?\n\necho = FALSE\nTITLE_BASICS |&gt;\n  filter(titleType == \"tvSeries\") |&gt;\n  summarise(total = n())\n\n  total\n1 29868\n\n\nHow many TV episodes?\n\necho = FALSE\nTITLE_BASICS |&gt;\n  filter(titleType == \"tvEpisode\") |&gt;\n  summarise(total = n())\n\n   total\n1 156095\n\n\nWho is the oldest living person in our data set?\n\necho = FALSE\n NAME_BASICS |&gt;\n  filter(is.na(deathYear)) |&gt;  \n  arrange(birthYear) |&gt;        \n  select(primaryName, birthYear) |&gt; \n  slice(1)\n\n     primaryName birthYear\n1 Traudl Lessing      1625\n\n\nThere is one TV Episode in this data set with a perfect 10/10 rating and at least 200,000 IMDb ratings. What is it? What series does it belong to?\nFrom the data, the TV episode with a perfect rating and atleast 200,000 votes is Ozymandias from Breaking Bad.\n\necho = FALSE\ninner_join(TITLE_RATINGS, \n           TITLE_BASICS, \n           by = \"tconst\") |&gt;\n  drop_na()|&gt;\n  filter(averageRating == 10, numVotes &gt;= 200000)|&gt;\n    select(averageRating,numVotes,primaryTitle,genres)\n\n  averageRating numVotes primaryTitle               genres\n1            10   228472   Ozymandias Crime,Drama,Thriller\n\n\nWhat four projects is the actor Mark Hamill most known for?\nWith the Name Basics table, I was able the find Mark Hamill is known for Star Wars: Episode IV - A New Hope, Star Wars: Episode VIII - The Last Jedi, Star Wars: Episode V - The Empire Strikes Back and Star Wars: Episode VI - Return of the Jedi\n\necho = FALSE\nNAME_BASICS|&gt;\n   filter(primaryName == \"Mark Hamill\")|&gt;\n  select(primaryName,knownForTitles)|&gt;\n  separate_longer_delim(knownForTitles, \",\")|&gt;\n  inner_join(TITLE_BASICS, join_by(knownForTitles == tconst))|&gt;\n  select(primaryTitle)\n\n                                    primaryTitle\n1             Star Wars: Episode IV - A New Hope\n2        Star Wars: Episode VIII - The Last Jedi\n3 Star Wars: Episode V - The Empire Strikes Back\n4     Star Wars: Episode VI - Return of the Jedi\n\n\nWhat TV series, with more than 12 episodes, has the highest average rating?\n\necho = FALSE\nTITLE_EPISODES|&gt;\n  group_by(parentTconst)|&gt;\n  summarise(totalEpisodes = n())|&gt;\n  filter(totalEpisodes &gt; 12)|&gt;\n  inner_join(TITLE_BASICS, join_by(parentTconst == tconst))|&gt;\n  filter(titleType == \"tvSeries\")|&gt;\n  select(parentTconst, primaryTitle,totalEpisodes)|&gt;\n  inner_join(TITLE_RATINGS, join_by(parentTconst == tconst))|&gt;\n  arrange(desc(averageRating)) |&gt;\n  select(primaryTitle, totalEpisodes, averageRating) |&gt;\n  slice_head(n = 1)\n\n# A tibble: 1 × 3\n  primaryTitle totalEpisodes averageRating\n  &lt;chr&gt;                &lt;int&gt;         &lt;dbl&gt;\n1 Craft Games            318           9.7\n\n\nIs it true that episodes from later seasons of Happy Days have lower average ratings than the early seasons?\nUsing the Title Basics table, I was able to find that Happy Day ratings averaged 7.4 for each season.\n\necho = FALSE\nTITLE_BASICS|&gt;\n  filter(titleType == \"tvSeries\",primaryTitle == \"Happy Days\")|&gt;\n  inner_join(TITLE_RATINGS, join_by(tconst == tconst))|&gt;\n  inner_join(TITLE_EPISODES, join_by(tconst == parentTconst))|&gt;\n  select(seasonNumber, episodeNumber, averageRating)|&gt;\n  group_by(seasonNumber)|&gt;\n  arrange(desc(seasonNumber))|&gt;\n  summarise(averageSeasonRating = mean(averageRating, na.rm = TRUE))\n\n# A tibble: 11 × 2\n   seasonNumber averageSeasonRating\n   &lt;chr&gt;                      &lt;dbl&gt;\n 1 1                            7.4\n 2 10                           7.4\n 3 11                           7.4\n 4 2                            7.4\n 5 3                            7.4\n 6 4                            7.4\n 7 5                            7.4\n 8 6                            7.4\n 9 7                            7.4\n10 8                            7.4\n11 9                            7.4"
  }
]